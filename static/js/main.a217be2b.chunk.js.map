{"version":3,"sources":["components/Header.js","components/QuestionBlock.js","components/Navigation.js","components/Testing.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","questionNumber","total","className","title","radioStyle","display","height","lineHeight","QuestionBlock","data","onChange","chosenOption","question","options","Group","value","map","index","style","key","onChangeQuestion","onFinish","onClick","to","type","Testing","answers","setAnswers","useState","setOnChange","useMount","console","log","eng","useEffect","target","prevState","length","find","Navigation","Results","givenAnswers","rightAnswersCount","reduce","questions","result","id","rightOptionKey","App","path","render","params","match","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"k0BAUeA,EAPA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,eAAgBC,EAAY,EAAZA,MAChC,OAAO,kBAAC,IAAD,CACLC,UAAU,mBACVC,MAAK,mMAAwCH,EAAxC,YAA0DC,M,2BCF7DG,EAAa,CACjBC,QAAS,QACTC,OAAQ,OACRC,WAAY,QAqBCC,EAlBO,SAAC,GAA2C,IAAD,IAAxCC,YAAwC,MAAjC,GAAiC,EAA7BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aACpCC,EAAsBH,EAAtBG,SAAUC,EAAYJ,EAAZI,QAClB,OACE,yBAAKX,UAAU,kBACb,yBAAKA,UAAU,yBAAyBU,GACxC,yBAAKV,UAAU,2BACb,kBAAC,UAAMY,MAAP,CAAaJ,SAAUA,EAAUK,MAAOJ,GAEpCK,IAAIH,GAAS,SAACE,EAAOE,GAAR,OACb,kBAAC,UAAD,CAAOC,MAAOd,EAAYe,IAAKF,EAAOF,MAAOE,GAAQF,U,QCGlDP,EAlBO,SAAC,GAA2D,IAAzDR,EAAwD,EAAxDA,eAAgBC,EAAwC,EAAxCA,MAAOmB,EAAiC,EAAjCA,iBAAkBC,EAAe,EAAfA,SAChE,OACE,yBAAKnB,UAAU,aAAaoB,QAASF,GAEd,IAAnBpB,GAAwB,kBAAC,IAAD,CAAMuB,GAAE,UAAKvB,EAAiB,IAAK,kBAAC,IAAD,CAAQE,UAAU,qBAAqBsB,KAAK,QAA5C,mCAG3DxB,IAAmBC,EAEf,kBAAC,IAAD,CAAMsB,GAAE,YAAc,kBAAC,IAAD,CAAQD,QAASD,EAAUnB,UAAU,qBAAqBsB,KAAK,QAA/D,2DAEtB,kBAAC,IAAD,CAAMD,GAAE,UAAKvB,EAAiB,IAAK,kBAAC,IAAD,CAAQE,UAAU,qBAAqBsB,KAAK,QAA5C,2CCmBhCC,MAvBf,YAA2D,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,WAAY3B,EAAkB,EAAlBA,eACtCA,GAAkBA,EADsC,MAExB4B,qBAFwB,mBAEjDlB,EAFiD,KAEvCmB,EAFuC,KAcxD,OAVAC,aAAS,WACPC,QAAQC,IAAIC,MAGdC,qBAAU,WACRL,GAAY,kBAAM,YAA4B,IAAfd,EAAc,EAAxBoB,OAAUpB,MAC7BY,GAAW,SAACS,GAAD,sBAAoBA,EAApB,eAAgCpC,EAAiBe,aAE7D,CAACf,EAAgB2B,IAGlB,yBAAKzB,UAAU,qBACb,kBAAC,EAAD,CAAQF,eAAgBA,EAAgBC,MAAOgC,EAAII,SACnD,kBAAC,EAAD,CAAe5B,KAAM6B,IAAKL,EAAK,CAAC,KAAMjC,IAAkBU,SAAUA,EAAUC,aAAce,EAAQ1B,KAClG,kBAACuC,EAAD,CAAYvC,eAAgBA,EAAgBC,MAAOgC,EAAII,W,kBCP9CG,EAjBC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACXC,EAAoBC,IAAOC,GAAW,SAACC,EAAQ9B,GAAW,IACtD+B,EAAuB/B,EAAvB+B,GAAIC,EAAmBhC,EAAnBgC,eAEZ,OAAIN,EAAaK,KAAQC,IACdF,EAEJA,IACN,GAEH,OACE,yBAAK3C,UAAU,WAAf,wLACwCwC,EADxC,iBACiEE,EAAUP,OAD3E,uD,cCoBWW,MAtBf,WAAgB,IAAD,EACiBpB,mBAAS,IAD1B,mBACNF,EADM,KACGC,EADH,KAGb,OACE,yBAAKzB,UAAU,OACb,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAO+C,KAAK,KAAI,kBAAC,IAAD,CAAU1B,GAAG,iBAC7B,kBAAC,IAAD,CAAO0B,KAAK,4BAA4BC,OAAQ,YAA4B,IAAhBC,EAAe,EAAxBC,MAASD,OAC1D,OACE,kBAAC,EAAD,eAASzB,QAASA,EAASC,WAAYA,GAAgBwB,OAG3D,kBAAC,IAAD,CAAOF,KAAK,WAAWC,OAAQ,kBAC7B,kBAAC,EAAD,CAAST,aAAcf,UChBf2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASJ,MACvB,2DCZNK,IAASP,OACP,kBAAC,EAAD,MACAQ,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,c","file":"static/js/main.a217be2b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { PageHeader } from 'antd'\r\n\r\nconst Header = ({ questionNumber, total }) => {\r\n  return <PageHeader\r\n    className=\"site-page-header\"\r\n    title={`Проверь уровень английского языка. ${questionNumber}/${total}`}\r\n  />\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport map from 'lodash/map'\r\nimport { Radio } from 'antd'\r\n\r\nconst radioStyle = {\r\n  display: 'block',\r\n  height: '30px',\r\n  lineHeight: '30px',\r\n}\r\n\r\nconst QuestionBlock = ({ data = {}, onChange, chosenOption }) => {\r\n  const { question, options } = data\r\n  return (\r\n    <div className=\"question-block\">\r\n      <div className=\"question-block__title\">{question}</div>\r\n      <div className=\"question-block__options\">\r\n        <Radio.Group onChange={onChange} value={chosenOption}>\r\n          {\r\n            map(options, (value, index) => (\r\n            <Radio style={radioStyle} key={index} value={index}>{value}</Radio>\r\n            ))\r\n          }\r\n        </Radio.Group>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionBlock\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Button } from 'antd'\r\n\r\nconst QuestionBlock = ({ questionNumber, total, onChangeQuestion, onFinish }) => {\r\n  return (\r\n    <div className=\"navigation\" onClick={onChangeQuestion}>\r\n      {\r\n        questionNumber !== 1 && <Link to={`${questionNumber - 1}`}><Button className=\"navigation__button\" type=\"link\">Назад</Button></Link>\r\n      }\r\n      {\r\n        questionNumber === total\r\n          ? (\r\n            <Link to={`/results`}><Button onClick={onFinish} className=\"navigation__button\" type=\"link\">Завершить</Button></Link>\r\n          ) : (\r\n            <Link to={`${questionNumber + 1}`}><Button className=\"navigation__button\" type=\"link\">Вперед</Button></Link>\r\n          )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionBlock\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useMount } from 'react-use'\r\nimport find from \"lodash/find\"\r\n\r\nimport eng from '../questions/eng.json'\r\n\r\nimport Header from './Header'\r\nimport QuestionBlock from './QuestionBlock'\r\nimport Navigation from './Navigation'\r\n\r\n\r\nfunction Testing({ answers, setAnswers, questionNumber }) {\r\n  questionNumber = +questionNumber\r\n  const [onChange, setOnChange] = useState()\r\n  \r\n  useMount(() => {\r\n    console.log(eng)\r\n  })\r\n\r\n  useEffect(() => {\r\n    setOnChange(() => ({ target: { value } }) => {\r\n      setAnswers((prevState) => ({...prevState, [questionNumber]: value }))\r\n    })\r\n  }, [questionNumber, setAnswers])\r\n\r\n  return (\r\n    <div className=\"content-container\">\r\n      <Header questionNumber={questionNumber} total={eng.length} />\r\n      <QuestionBlock data={find(eng, [`id`, questionNumber])} onChange={onChange} chosenOption={answers[questionNumber]} />\r\n      <Navigation questionNumber={questionNumber} total={eng.length} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Testing\r\n","import React from 'react'\r\nimport reduce from 'lodash/reduce'\r\n\r\nimport questions from '../questions/eng.json'\r\n\r\nconst Results = ({ givenAnswers }) => {\r\n  const rightAnswersCount = reduce(questions, (result, value) => {\r\n    const { id, rightOptionKey } = value\r\n    \r\n    if (givenAnswers[id] === rightOptionKey) {\r\n      return ++result\r\n    }\r\n    return result\r\n  }, 0)\r\n\r\n  return (\r\n    <div className=\"results\">\r\n      Тест завершен. Вы ответили верно на { rightAnswersCount } из { questions.length } вопросов.\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Results\r\n","import React, { useState } from 'react'\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n} from \"react-router-dom\"\n\n\nimport Testing from './components/Testing'\nimport Results from './components/Results'\n\nimport './App.css';\nimport 'antd/dist/antd.css'\n\nfunction App() {\n  const [answers, setAnswers] = useState({})\n\n  return (\n    <div className=\"App\">\n      <Router>\n        {/* <Switch> */}\n          <Route path=\"/\"><Redirect to=\"/question/1\" /></Route>\n          <Route path=\"/question/:questionNumber\" render={({ match: { params } }) => {\n            return (\n              <Testing answers={answers} setAnswers={setAnswers} {...params} />\n            )\n          }} />\n          <Route path=\"/results\" render={() => (\n            <Results givenAnswers={answers} />\n          )} />\n        {/* </Switch> */}\n      </Router>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}